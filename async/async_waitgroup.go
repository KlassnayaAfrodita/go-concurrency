package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup

	// wg.Add(3) //* если известно, сколько горутин будет, но тогда не надо каждый раз делать Add(1)
	for i := 0; i < 3; i++ {
		//! до старта горутины делать!!!!!!!
		wg.Add(1) // wg инкримитирует счетчик

		go func(i int) {
			// wg.Add(1) //! нельзя запускать Add внутри горутины, потому что
			//! в main доходим до wait еще до того, как управление передалось горутине, не успеет сделать Add

			//?--------------------------------------------------
			//! правильный вызов wg.Done() через defer!!!!!!!!!!
			defer wg.Done() // wg динкримитирует счетчик

			for j := 0; j < 10; j++ { // какаято работа
				fmt.Println("i ", i, "j ", j)
			}

			// wg.Done() //!  так лучше не делать, потому что если горутина упадет с паникой, счетчик не обновится

		}(i)
	}

	wg.Wait() //! ждет, когда вся работа закончится (все горутины закончат работу), счетчик = 0
	// time.Sleep(time.Microsecond)
}
